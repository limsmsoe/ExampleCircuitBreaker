import javafx.fxml.FXML;

import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Controller {
    @FXML
    public void initialize(){
        System.out.println("Hello world");
        // Multithreaded code generated by Copilot using the prompt, then modified by hand to be for loop
        // "Make my main method multithreaded so that multiple seatCustomers happen at the same time"
        Host host = new Host();
        ExecutorService executor = Executors.newFixedThreadPool(3);

        for (int i = 0; i < 10; i++) {
            int finalI = i;
            executor.submit(() -> {
                try {
                    int seatsNeeded = (new Random()).nextInt(10 - 1 + 1) + 1;
                    boolean barAcceptable = (new Random()).nextBoolean();

                    int attempts = 0;

                    boolean res = false;

                    do{
                        res = host.seatCustomer(new Customer(seatsNeeded, barAcceptable));
                        attempts++;
                        Thread.sleep(1000);
                    } while(!res);

                    System.out.printf("Customer %d: Needed: %d seats, barAcceptable %b, was seated after: %d%n", finalI, seatsNeeded, barAcceptable, attempts);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
        }

        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
