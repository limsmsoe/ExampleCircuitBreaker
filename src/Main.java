import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {

    public static void main(String[] args) throws InterruptedException {
        // Multithreaded code generated by Copilot using the prompt
        // "Make my main method multithreaded so that multiple seatCustomers happen at the same time"
        Host host = new Host();
        ExecutorService executor = Executors.newFixedThreadPool(3);

        executor.submit(() -> {
            try {
                boolean res1 = host.seatCustomer(new Customer(10, true));
                System.out.println("Customer 1 seated: " + res1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        executor.submit(() -> {
            try {
                boolean res2 = host.seatCustomer(new Customer(10, true));
                System.out.println("Customer 2 seated: " + res2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        executor.submit(() -> {
            try {
                boolean res3 = host.seatCustomer(new Customer(3, true));
                System.out.println("Customer 3 seated: " + res3);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
    }
}